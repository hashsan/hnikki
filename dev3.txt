＃ローカルストレージにファイルデータ流し込んでみた件。
速報でございます。
まずは検証したコード
---
//<input type="file" id="x">

var x=document.getElementById('x')

x.onchange=()=>{
  var file = x.files[0]
  
  const key='x.png'
  localStorage.setItem(key,file)
  
  var setfile = localStorage.getItem(key)
  console.log(setfile) //broken file
  var img2 = new Image()
  img2.src = URL.createObjectURL(setfile)
  document.body.append(img2)

  //Uncaught TypeError: Failed to execute 'createObjectURL' on 'URL': Overload resolution failed.
}
---
何してるのかというと、インプットファイルをHTMLに一つ置いて。
チェンジイベントで、ファイル取って。ひとつな。
それをローカルストレージさんに入れて。
そして、取り出して、元のファイルの整合性が取れていれば、画像が表示されるはずですね。
「ブロークンだったけどなっ！」
ローカルストレージさんの末恐ろしい所は、セットアイテムで突っ込んでも、一見良さげなところ。
「ここではエラーが起きないだとっ！」
取り出して、
---
img2.src = URL.createObjectURL(setfile)
---
このあたりでエラーがでる。
クリエイトオブジェクトさんが、クリエイトできない。
理由。
---
Uncaught TypeError: Failed to execute 'createObjectURL' on 'URL': Overload resolution failed.
---
結構怖いエラーだな。クリエイトオブジェクトさんはメモリ食うからな。そんなブラウザ上のキャッシュ的なオーバーフロー有るからな。
で。これが云わんとしていることは。
それ実行できねえよ。なんかファイルじゃねえよ。
https://i.pinimg.com/564x/7a/a7/c1/7aa7c17a9c8fb76d94a20adebc0f7294.jpg
「もうそれファイルじゃねえよ！」
「人間じゃない何かだ」
「（いやファイルデータだけどな）」
結論。壊れてる。
つまり、ベースロクヨンさんの勝利ですね。
はい。ベースロクヨン。ベースロクヨン。
JSONとも仲良しだからね。
でも。
「突っ込む前に教えてっ！」
とりま解決。

＃突如噴出した問題。
ローカルストレージの検証は終わったのですが、ひとつ問題が発生。
スタックオーバーフローなどにも、書かれていましたが「ハッシュチェンジイベントは、ビフォアアクセスがない！」
---
window.addEvent...('hashchange',...) //has
window.addEvent...('beforehashchange',...) //nee-yo
---
これ何が困るのかというと、スクロールです。
ハッシュチェンジイベントは、ハッシュチェンジを検出することが可能ですが、ハッシュチェンジイベントで指定したハッシュは実は「まだレンダリングされていない可能性があります！」
これの何が、というと、基本はアンカー「＃」にアクセスした場合、勝手にスクロールが移動します。スムーズか、インスタントかという違いはあれども。
まだドムないからどこにいけばいいのか、わからん。
「現状維持！」
https://i.pinimg.com/564x/37/f6/4a/37f64af10bfa5a02da98fd71806bdca3.jpg
「流石だなウィンドウ（手抜きの割りにうまい）」
まあ、上に下にスクロールが右往左往しても困るので、まあその通り、何もしないおｋな仕様なんでしょうが。
さて。
解決策。
ハッシュチェンジ発生。
---
window.scroll(0,0)
---
はい。トップに戻せよ。
スムーズでもいいが、クイックで。
これはもしかしたら、ハッシュサンのコアを修正する可能性があるかもしれない。
一行だけど。結構重い一撃だけど。
仕様としては難しい判断でしょう。
「だって、必ず最上位に戻す必要あるの？」
みたいな、必ず、がないと戻さないほうがいいからね。
必ずはただ一度の例外で駆逐される。
白いカラスさん的なお話ですね。
とりまウィンドウスクロールうえゼロすればいいんで。改題。

＃最近読んだ本に。
少し閑話休題。今は、サーバーに画像をアップロードする辺りで小休止しているからな。
んで、この本はコーディングの本で。
いろいろと、無粋なルールが書かれているけれども。
幾つか良いと思ったのは。
「関数はロジックレスであるべきだ！」
と
「B級関数作るなよ」
みたいな。やつ。
簡単に云うとクソコードの判定が示されていましたね。
さて。クソコードとは。
「イフ文にロジックが書いてあることらしい！」
つまり、クソコードはこれ。
---
function foo(xyz){
 xyz = xyz||0
 if(xyz===1){
  xyz +=1
 }else if(xyz===2){
  xyz +=2
 }
 return xyz;
}
---
これの何がダメなのかというと。
「正しい処理はロジックレスで！」
ですね。
つまり条件文は例外にしろよ。という話で。
---
function foo(xyz){
 if(!isNumber(xyz)){
  throw new Error('errrrrrrr')
 }
 if(xyz>3){
  throw new Error('san yori ookii kazoerarenai')
 }
 //正しい処理をイフ文の中にいれない。
 xyz +=1
 return xyz
}
---
そう。
「正しい処理をイフ文の中にいれない！」
ダメ絶対。
「（絶対無理だけどな）」
というので、それしたらB級コードらしいですね。条件文の中に例外処理以外を投入するのは。とくに正しい処理を突っ込むのは。
ロジックレスの話でした。大規模開発では重要ですね。
---
if... throw new Error('念仏')
---
「唱えよ！」
https://i.pinimg.com/564x/ab/43/0b/ab430ba7bcf7dbfbffc733674b34c0bf.jpg
戻るよ開発に。
＠dev4へ#dev4
